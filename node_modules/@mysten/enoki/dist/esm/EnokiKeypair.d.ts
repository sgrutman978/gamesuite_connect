import type { SignatureWithBytes } from '@mysten/sui/cryptography';
import { Keypair, PublicKey } from '@mysten/sui/cryptography';
import type { Ed25519Keypair, Ed25519PublicKey } from '@mysten/sui/keypairs/ed25519';
import type { ZkLoginSignatureInputs } from '@mysten/sui/zklogin';
export declare class EnokiPublicKey extends PublicKey {
    #private;
    constructor(input: {
        address: string;
        ephemeralPublicKey: Ed25519PublicKey;
    });
    flag(): number;
    toSuiAddress(): string;
    verify(): never;
    toRawBytes(): Uint8Array;
}
export declare class EnokiKeypair extends Keypair {
    #private;
    constructor(input: {
        address: string;
        maxEpoch: number;
        proof: ZkLoginSignatureInputs;
        ephemeralKeypair: Ed25519Keypair;
    });
    sign(data: Uint8Array): Promise<Uint8Array<ArrayBufferLike>>;
    signPersonalMessage(bytes: Uint8Array): Promise<SignatureWithBytes>;
    signTransaction(bytes: Uint8Array): Promise<SignatureWithBytes>;
    getKeyScheme(): import("@mysten/sui/cryptography").SignatureScheme;
    getPublicKey(): EnokiPublicKey;
    export(): never;
    getSecretKey(): never;
}
